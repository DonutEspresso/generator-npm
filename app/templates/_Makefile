#
# Directories
#
ROOT		:= $(shell pwd)
NODE_MODULES	:= $(ROOT)/node_modules
NODE_BIN	:= $(NODE_MODULES)/.bin
TOOLS		:= $(ROOT)/tools
TEST		:= $(ROOT)/test
COVERAGE	:= $(ROOT)/coverage


#
# Tools and binaries
#
ESLINT		:= $(NODE_BIN)/eslint
JSCS		:= $(NODE_BIN)/jscs
MOCHA		:= $(NODE_BIN)/mocha
_MOCHA		:= $(NODE_BIN)/_mocha
ISTANBUL	:= $(NODE_BIN)/istanbul
NSP		:= $(NODE_BIN)/nsp
<%_ if (data.coveralls) { _%>
COVERALLS	:= $(NODE_BIN)/coveralls
<%_ } _%>
NPM		:= npm
NSP_BADGE	:= $(TOOLS)/nspBadge.js
<%_ if (!data.coveralls) { _%>
COVERAGE_BADGE	:= $(TOOLS)/coverageBadge.js
<%_ } _%>


#
# Files and globs
#
GIT_HOOK_SRC	= '../../tools/githooks/pre-push'
GIT_HOOK_DEST	= '.git/hooks/pre-push'
<%_ if (data.testEntry) { _%>
TEST_ENTRY	:= $(ROOT)/test/index.js
<%_ } _%>
<%_ if (data.coveralls) { _%>
LCOV	:= $(ROOT)/coverage/lcov.info
<%_ } _%>
SHRINKWRAP	:= $(ROOT)/npm-shrinkwrap.json
ALL_FILES	:= $(shell find $(ROOT) \
			-not \( -path $(NODE_MODULES) -prune \)
			-name '*.js' -type f)
TEST_FILES	:= $(shell find $(TEST) -name '*.js' -type f)


#
# Targets
#

node_modules: package.json ## Install node_modules
	@$(NPM) install
	@touch $(NODE_MODULES)


.PHONY: help
help:
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'


.PHONY: all
all: prepush ## Runs all build tasks


.PHONY: githooks
githooks: ## Install git pre-push hooks.
	@ln -s $(GIT_HOOK_SRC) $(GIT_HOOK_DEST)


.PHONY: lint
lint: node_modules $(ESLINT) $(ALL_FILES) ## Run lint checker (eslint).
	@$(ESLINT) $(ALL_FILES)


.PHONY: codestyle
codestyle: node_modules $(JSCS) $(ALL_FILES) ## Run code style checker (jscs).
	@$(JSCS) $(ALL_FILES)


.PHONY: codestyle-fix
codestyle-fix: node_modules $(JSCS) $(ALL_FILES) ## Run code style checker with auto whitespace fixing.
	@$(JSCS) $(ALL_FILES) --fix


.PHONY: nsp
nsp: node_modules $(NSP) $(NPM) $(NSP_BADGE) ## Run nsp. Shrinkwraps dependencies, checks for vulnerabilities.
	@$(NPM) shrinkwrap --dev
	@($(NSP) check) | $(NSP_BADGE)
	@rm $(SHRINKWRAP)


.PHONY: prepush
prepush: node_modules lint codestyle coverage nsp ## Git pre-push hook task. Run before committing and pushing.


.PHONY: test
test: node_modules $(MOCHA) ## Run unit tests.
<%_ if (data.testEntry) { _%>
	@$(MOCHA) -R spec --full-trace $(TEST_ENTRY)
<%_ } else { _%>
	@$(MOCHA) -R spec --full-trace
<%_ } _%>


.PHONY: coverage
coverage: node_modules $(ISTANBUL) $(_MOCHA) $(COVERAGE_BADGE) ## Run unit tests with coverage reporting. Generates reports into /coverage.
<%_ if (!data.coveralls) { _%>
	@$(ISTANBUL) cover $(_MOCHA) --report json-summary --report html -- -R spec $(TEST_ENTRY)
	@$(COVERAGE_BADGE)
<%_ } else { _%>
	@$(ISTANBUL) cover $(_MOCHA) --report lcovonly -- -R spec
<%_ } _%>


<%_ if (data.coveralls) { _%>
.PHONY: report-coverage ## Report unit test coverage to coveralls
report-coverage: coverage
	@cat $(LCOV) | $(COVERALLS)


<%_ } _%>
.PHONY: clean
clean: clean-coverage ## Cleans unit test coverage files and node_modules.
	@rm -rf $(NODE_MODULES)
	@rm -rf $(COVERAGE)


#
## Debug -- print out a a variable via `make print-FOO`
#
print-%  : ; @echo $* = $($*)
